{"version":3,"file":"bundle.js","mappings":"oiBAMA,I,EAmFgDA,EAxExCC,EAoFEC,IAAAA,EAAAA,CAAAA,GC9FVC,QAAQC,KDUAH,EAAiB,GCVM,CAAC,UAAW,SAAU,kBDWvCI,SAAQ,SAACC,GACH,mBAAZA,GAA4C,cAAZA,GAClCL,EAAeM,KAAKD,EAEvB,IACML,ICfTE,QAAQC,IAEG,kBAOXD,QAAQC,I,kXD6DN,CC3DE,CACEI,MAAO,iBACPC,IAAK,EACLC,SAAU,GACVC,YAAa,KDuDjB,CCrDE,SDqDF,SCjDFR,QAAQC,ID6Dc,aAD0BJ,EC3Dd,CAC9BQ,MAAO,SACPC,IAAK,EACLC,SAAU,IDyDFF,OAAuC,WAAhBR,EAAMQ,MAC9BR,EAEF,K","sources":["webpack://lesson-26-homework/./src/task.ts","webpack://lesson-26-homework/./src/index.ts"],"sourcesContent":["// В функцию приходит массив состояний заказа и фильтруется\n// Нужно заменить FIXME на тип который вычисляется на освове OrderState\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype First = Array<typeof orderStates[0 | 1 | 4]>;\n\nconst orderStates = [\n  \"initial\",\n  \"inWork\",\n  \"buyingSupplies\",\n  \"producing\",\n  \"fullfilled\",\n] as const;\n\ntype OrderState = typeof orderStates[number];\n\nexport const getUserOrderStates = (orderStates: OrderState[]): First => {\n  const filteredStates = [] as First;\n  orderStates.forEach((element) => {\n    if (element !== \"buyingSupplies\" && element !== \"producing\") {\n      filteredStates.push(element);\n    }\n  });\n  return filteredStates;\n};\n\n// Есть объединение (юнион) типов заказов в различных состояниях\n// Нужно заменить FIXME на тип который достанет из Order все возможные состояния (state)\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype Second = Order[\"state\"];\n\ntype Order =\n  | {\n      state: \"initial\";\n      sum: number;\n    }\n  | {\n      state: \"inWork\";\n      sum: number;\n      workerId: number;\n    }\n  | {\n      state: \"buyingSupplies\";\n      sum: number;\n      workerId: number;\n      suppliesSum: number;\n    }\n  | {\n      state: \"producing\";\n      sum: number;\n      workerId: number;\n      suppliesSum: number;\n      produceEstimate: Date;\n    }\n  | {\n      state: \"fullfilled\";\n      sum: number;\n      workerId: number;\n      suppliesSum: number;\n      produceEstimate: Date;\n      fullfillmentDate: Date;\n    };\n\nexport const getOrderState = (order: Order): Second => order.state;\n\n// Есть общая функция omit которая удаляет поле из объекта и возвращает его без этого поля\n// Нужно заменить FIXME на соответствующий тип\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype Third<T, K extends keyof T> = Omit<T, K>;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const omit = <T extends Record<any, any>, K extends keyof T>(\n  obj: T,\n  keyToOmit: K\n): Third<T, K> => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { [keyToOmit]: _, ...withoutKey } = obj;\n  return withoutKey;\n};\n\n// Есть объединение (юнион) типов заказов в различных состояниях\n// и функция filterOnlyInitialAndInWorkOrder которая принимает заказы в любых состояниях\n// А возвращает только initial и inWork\n// Нужно заменить FIXME на правильный тип вычисленный на основе Order\n\ntype Fourth = Extract<Order, { state: \"initial\" } | { state: \"inWork\" }> | null;\n\nexport const filterOnlyInitialAndInWorkOrder = (order: Order): Fourth => {\n  if (order.state === \"initial\" || order.state === \"inWork\") {\n    return order;\n  }\n  return null;\n};\n\n// Есть функция которая достает из реакт компонента (любого, и Functional и Class) его defaultProps\n// Нужно заменить FIXME на правильный тип\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nnamespace React {\n  export type ComponentType<T> = { defaultProps: T };\n}\n\ntype Five<T> = ReturnType<\n  (component: React.ComponentType<T>) => typeof component.defaultProps\n>;\n\n// Hint: infer\nexport const getDefaultProps = <T>(\n  component: React.ComponentType<T>\n): Five<T> => {\n  return component.defaultProps;\n};\n\n// Задача состоит в том что написать калькулято для натуральных чисел, но только на типах!\n// Ниже приведена заготовка\n// Хочется поддержки сложения и вычитания, если хочется еще челленджа, то деление и умножение\n// Из-за ограничений глубины вычислений поддержать все натуральные числа не получится, это нормально\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype Increase<\n  A,\n  tailRec extends Array<number> = []\n> = tailRec[\"length\"] extends A\n  ? [...tailRec, 0][\"length\"]\n  : Increase<A, [...tailRec, 0]>;\n\ntype Decrease<A, tailRec extends Array<number> = []> = [\n  ...tailRec,\n  0\n][\"length\"] extends A\n  ? tailRec[\"length\"]\n  : Decrease<A, [...tailRec, 0]>;\n\ntype ZERO = 0;\n\ntype Equals<A, B> = A extends B ? (B extends A ? \"success\" : never) : never;\n\ntype Add<A, B> = A extends ZERO ? B : Add<Decrease<A>, Increase<B>>;\ntype Subtract<A, B> = B extends ZERO ? A : Subtract<Decrease<A>, Decrease<B>>;\ntype Mul<A, B, I = 0, Result = 0> = I extends B\n  ? Result\n  : Mul<A, B, Increase<I>, Add<Result, A>>;\n\ntype Div<A, B, I = 1, Result = 1> = I extends B\n  ? Result\n  : Div<A, B, Decrease<I>, Subtract<Result, A>>;\n\nexport type OnePlusOneTest = Equals<Add<1, 1>, 2>;\nexport type OnePlusFiveTest = Equals<Add<1, 5>, 6>;\nexport type TwoMinusOneTest = Equals<Subtract<2, 1>, 1>;\nexport type FiveMinusTwoTest = Equals<Subtract<5, 2>, 3>;\nexport type FiveMulTwoTest = Equals<Mul<5, 2>, 10>;\nexport type SixDivTwoTest = Equals<Div<6, 2>, 3>;\n","import {\n  getUserOrderStates,\n  getOrderState,\n  omit,\n  filterOnlyInitialAndInWorkOrder,\n} from \"./task\";\n\nconsole.log(getUserOrderStates([\"initial\", \"inWork\", \"buyingSupplies\"]));\nconsole.log(\n  getOrderState({\n    state: \"buyingSupplies\",\n    sum: 5,\n    workerId: 12,\n    suppliesSum: 100,\n  })\n);\n\nconsole.log(\n  omit(\n    {\n      state: \"buyingSupplies\",\n      sum: 5,\n      workerId: 12,\n      suppliesSum: 100,\n    },\n    \"state\"\n  )\n);\n\nconsole.log(\n  filterOnlyInitialAndInWorkOrder({\n    state: \"inWork\",\n    sum: 5,\n    workerId: 6,\n  })\n);\n"],"names":["order","filteredStates","React","console","log","forEach","element","push","state","sum","workerId","suppliesSum"],"sourceRoot":""}