{"version":3,"file":"bundle.js","mappings":"oiBAuC+C,IAACA,ECtBxCC,ECVRC,QAAQC,KDUAF,EAAiB,GCVM,CAAC,UAAW,SAAU,kBDWvCG,SAAQ,SAACC,GACH,mBAAZA,GAA4C,cAAZA,GAClCJ,EAAeK,KAAKD,EAEvB,IACMJ,ICfTC,QAAQC,IAEG,kBAOXD,QAAQC,I,kXCLN,CDOE,CACEI,MAAO,iBACPC,IAAK,EACLC,SAAU,GACVC,YAAa,KCXjB,CDaE,SCbF,SDiBFR,QAAQC,IFWc,aAD0BH,EETd,CAC9BO,MAAO,SACPC,IAAK,EACLC,SAAU,IFOFF,OAAuC,WAAhBP,EAAMO,MAC9BP,EAEF,K","sources":["webpack://lesson-26-homework/./src/4.ts","webpack://lesson-26-homework/./src/1.ts","webpack://lesson-26-homework/./src/index.ts","webpack://lesson-26-homework/./src/3.ts"],"sourcesContent":["// Есть объединение (юнион) типов заказов в различных состояниях\n// и функция filterOnlyInitialAndInWorkOrder которая принимает заказы в любых состояниях\n// А возвращает только initial и inWork\n// Нужно заменить FIXME на правильный тип вычисленный на основе Order\n\ntype Order =\n  | {\n      state: \"initial\";\n      sum: number;\n    }\n  | {\n      state: \"inWork\";\n      sum: number;\n      workerId: number;\n    }\n  | {\n      state: \"buyingSupplies\";\n      sum: number;\n      workerId: number;\n      suppliesSum: number;\n    }\n  | {\n      state: \"producing\";\n      sum: number;\n      workerId: number;\n      suppliesSum: number;\n      produceEstimate: Date;\n    }\n  | {\n      state: \"fullfilled\";\n      sum: number;\n      workerId: number;\n      suppliesSum: number;\n      produceEstimate: Date;\n      fullfillmentDate: Date;\n    };\n\ntype FIXME = Extract<Order, { state: \"initial\" } | { state: \"inWork\" }> | null;\n\nexport const filterOnlyInitialAndInWorkOrder = (order: Order): FIXME => {\n  if (order.state === \"initial\" || order.state === \"inWork\") {\n    return order;\n  }\n  return null;\n};\n","// В функцию приходит массив состояний заказа и фильтруется\n// Нужно заменить FIXME на тип который вычисляется на освове OrderState\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype FIXME = Array<typeof orderStates[0 | 1 | 4]>;\n\nconst orderStates = [\n  \"initial\",\n  \"inWork\",\n  \"buyingSupplies\",\n  \"producing\",\n  \"fullfilled\",\n] as const;\n\ntype OrderState = typeof orderStates[number];\n\nexport const getUserOrderStates = (orderStates: OrderState[]): FIXME => {\n  const filteredStates = [] as FIXME;\n  orderStates.forEach((element) => {\n    if (element !== \"buyingSupplies\" && element !== \"producing\") {\n      filteredStates.push(element);\n    }\n  });\n  return filteredStates;\n};\n","import { getUserOrderStates } from \"./1\";\nimport { getOrderState } from \"./2\";\n\nimport { omit } from \"./3\";\n\nimport { filterOnlyInitialAndInWorkOrder } from \"./4\";\n\nconsole.log(getUserOrderStates([\"initial\", \"inWork\", \"buyingSupplies\"]));\nconsole.log(\n  getOrderState({\n    state: \"buyingSupplies\",\n    sum: 5,\n    workerId: 12,\n    suppliesSum: 100,\n  })\n);\n\nconsole.log(\n  omit(\n    {\n      state: \"buyingSupplies\",\n      sum: 5,\n      workerId: 12,\n      suppliesSum: 100,\n    },\n    \"state\"\n  )\n);\n\nconsole.log(\n  filterOnlyInitialAndInWorkOrder({\n    state: \"inWork\",\n    sum: 5,\n    workerId: 6,\n  })\n);\n","// Есть общая функция omit которая удаляет поле из объекта и возвращает его без этого поля\n// Нужно заменить FIXME на соответствующий тип\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype FIXME<T, K extends keyof T> = Omit<T, K>;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const omit = <T extends Record<any, any>, K extends keyof T>(\n  obj: T,\n  keyToOmit: K\n): FIXME<T, K> => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { [keyToOmit]: _, ...withoutKey } = obj;\n  return withoutKey;\n};\n"],"names":["order","filteredStates","console","log","forEach","element","push","state","sum","workerId","suppliesSum"],"sourceRoot":""}